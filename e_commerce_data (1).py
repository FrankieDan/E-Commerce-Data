# -*- coding: utf-8 -*-
"""E-Commerce Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ya3keOGA-I3AvItBPwhGqtg3e24i1s-A
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("carrie1/ecommerce-data")

print("Path to dataset files:", path)

from google.colab import files

uploaded = files.upload()

import pandas as pd

# Replace with the exact name of your uploaded file
da = pd.read_csv("data.csv", encoding='ISO-8859-1')

# Quick preview
da.head()

#Data Cleaning
#Data Cleaning
# Drop rows without CustomerID
da = da.dropna(subset=['CustomerID'])

# Remove cancelled invoices (those starting with 'C')
da = da[~da['InvoiceNo'].astype(str).str.startswith('C')].copy()

# Convert InvoiceDate to datetime
da['InvoiceDate'] = pd.to_datetime(da['InvoiceDate'])

# Create TotalPrice column safely
da.loc[:, 'TotalPrice'] = da['Quantity'] * da['UnitPrice']

# Remove negative quantity/price
da = da[(da['Quantity'] > 0) & (da['UnitPrice'] > 0)].copy()

#EDA
import matplotlib.pyplot as plt
import seaborn as sns

# Set style
plt.style.use('ggplot')

# Total Revenue
country_revenue = da.groupby('Country')['TotalPrice'].sum().sort_values(ascending=False)
country_revenue = country_revenue.drop('United Kingdom').head(10)

# Pie chart
plt.figure(figsize=(8, 8))
plt.pie(country_revenue, labels=country_revenue.index, autopct='%1.1f%%', startangle=140)
plt.title("Top 10 Countries by Revenue (Excl. UK)")
plt.axis('equal')  # Equal aspect ratio ensures the pie is round
plt.tight_layout()
plt.show()

#Top 10 Best-Selling Products (by revenue)

top_products = da.groupby('Description')['TotalPrice'].sum().sort_values(ascending=False).head(10)

# Plot
plt.figure(figsize=(10, 6))
top_products.plot(kind='bar')
plt.title("Top 10 Best-Selling Products (Revenue)")
plt.ylabel("Revenue (Â£)")
plt.xlabel("Product Description")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

#Revenue By Country
country_revenue = da.groupby('Country')['TotalPrice'].sum().sort_values(ascending=False).drop('United Kingdom').head(10)
import seaborn as sns

plt.figure(figsize=(12, 6))
sns.barplot(x=country_revenue.values, y=country_revenue.index, palette="viridis")
plt.title("Top 10 Countries by Revenue (Excl. UK)")
plt.xlabel("Revenue (Â£)")
plt.ylabel("Country")
plt.tight_layout()
plt.show()

#Sales By Hour
import plotly.express as px

# Group revenue by hour
da['Hour'] = da['InvoiceDate'].dt.hour
hourly_sales = da.groupby('Hour')['TotalPrice'].sum().reset_index()

# Plotly interactive bar chart
fig = px.bar(
    hourly_sales,
    x='Hour',
    y='TotalPrice',
    labels={'TotalPrice': 'Revenue (Â£)', 'Hour': 'Hour of Day'},
    title='Interactive: Revenue by Hour of Day'
)

fig.update_layout(xaxis=dict(dtick=1))  # Ensure each hour shows up on X-axis
fig.show()

#RFM ANALYSIS
# Reference date (e.g., the day after the last transaction)
import datetime as dt

snapshot_date = da['InvoiceDate'].max() + dt.timedelta(days=1)

rfm = da.groupby('CustomerID').agg({
    'InvoiceDate': lambda x: (snapshot_date - x.max()).days,
    'InvoiceNo': 'nunique',
    'TotalPrice': 'sum'
})

# Rename columns
rfm.columns = ['Recency', 'Frequency', 'Monetary']

# Preview
rfm.head()

# Recency: Lower is better
rfm['R'] = pd.qcut(rfm['Recency'], 5, labels=[5, 4, 3, 2, 1])

# Frequency & Monetary: Higher is better
rfm['F'] = pd.qcut(rfm['Frequency'].rank(method="first"), 5, labels=[1, 2, 3, 4, 5])
rfm['M'] = pd.qcut(rfm['Monetary'], 5, labels=[1, 2, 3, 4, 5])

# Combine RFM scores
rfm['RFM_Score'] = rfm['R'].astype(str) + rfm['F'].astype(str) + rfm['M'].astype(str)

# Quick look at segments
rfm.head()

# @title Frequency vs Monetary

from matplotlib import pyplot as plt
rfm.plot(kind='scatter', x='Frequency', y='Monetary', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

# Example segmenting logic
def rfm_segment(row):
    if row['RFM_Score'] == '555':
        return 'Best Customers'
    elif row['R'] == '5':
        return 'Recent Customers'
    elif row['F'] == '5':
        return 'Frequent Buyers'
    elif row['M'] == '5':
        return 'Big Spenders'
    elif row['R'] == '1':
        return 'Churn Risk'
    else:
        return 'Others'

rfm['Segment'] = rfm.apply(rfm_segment, axis=1)

# View counts by segment
rfm['Segment'].value_counts()

plt.figure(figsize=(10, 6))
rfm['Segment'].value_counts().sort_values().plot(kind='barh', color='skyblue')
plt.title('Customer Segments by RFM Score')
plt.xlabel('Number of Customers')
plt.ylabel('Segment')
plt.tight_layout()
plt.show()

#Sales Forecasting with Prophet
!pip install prophet

# Daily revenue
daily_revenue = da.groupby(da['InvoiceDate'].dt.date)['TotalPrice'].sum().reset_index()

# Rename for Prophet
daily_revenue.columns = ['ds', 'y']  # Prophet expects 'ds' (date) and 'y' (value)

from prophet import Prophet

# Initialize and fit model
model = Prophet()
model.fit(daily_revenue)

# Make future dataframe (e.g., 90 days)
future = model.make_future_dataframe(periods=90)
sales_forecast = model.predict(future)

# Visualize
fig = model.plot(sales_forecast)

fig2 = model.plot_components(sales_forecast)

#Dashboard
!pip install dash

daily_revenue.to_csv('actual_revenue.csv', index=False)
sales_forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].to_csv('forecasted_revenue.csv', index=False)

# Download them
from google.colab import files
files.download('actual_revenue.csv')
files.download('forecasted_revenue.csv')

import dash
from dash import dcc, html
import pandas as pd
import plotly.express as px

# Load your data
actual_da = pd.read_csv('actual_revenue.csv')
sales_forecast_da = pd.read_csv('forecasted_revenue.csv')

# Dash App Init
app = dash.Dash(__name__)
app.title = "E-Commerce Sales Dashboard"

# Layout
app.layout = html.Div(children=[
    html.H1("ðŸ›’ E-Commerce Sales Dashboard", style={'textAlign': 'center'}),

    dcc.Graph(
        id='actual-sales',
        figure=px.line(actual_da, x='ds', y='y', title='ðŸ“ˆ Actual Revenue Over Time')
    ),

    dcc.Graph(
        id='forecasted-sales',
        figure=px.line(sales_forecast_da, x='ds', y='yhat', title='ðŸ”® Forecasted Revenue')
    )
])

# Run Server
if __name__ == '__main__':
    app.run(debug=True) # Changed from app.run_server to app.run

code = """
import streamlit as st
import pandas as pd

st.title("ðŸ›’ E-Commerce Data Analysis")

data = pd.read_csv("your_data.csv")

st.subheader("Raw Dataset")
st.write(data.head())

st.subheader("Summary Statistics")
st.write(data.describe())
"""

# Save as a .py file
with open("app.py", "w") as f:
    f.write(code)

from google.colab import files
uploaded = files.upload()

files.download("app.py")